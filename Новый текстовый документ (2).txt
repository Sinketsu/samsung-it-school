class TestSurfaceView extends SurfaceView implements SurfaceHolder.Callback{

    private MyTask task;

    public TestSurfaceView(Context context) {
        super(context);
        getHolder().addCallback(this);
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        task = new MyTask(getContext(), getHolder());
        task.start();
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        task.mystop();
    }
}

class MyTask extends Thread {
    private SurfaceHolder surfaceHolder;

    private boolean flag = true;

    private Paint paint = new Paint();

    private int radius = 0;
    private int x;
    private int y;

    public void setAll(int r, int x, int y) {

    }

    public MyTask(Context context, SurfaceHolder surfaceHolder) {
        this.surfaceHolder = surfaceHolder;
    }

    public void mystop() {
        flag = false;
    }

    @Override
    public void run() {
        while (flag) {
            Canvas canvas = surfaceHolder.lockCanvas();
            x = canvas.getWidth() / 2;
            y = canvas.getHeight() / 2;
            radius = (canvas.getHeight() > canvas.getWidth()) ? x : y;
            if (canvas != null) {
                try {
                    paint.setColor(Color.RED);
                    canvas.drawColor(Color.YELLOW);
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                    }
                    canvas.drawCircle(x, y, radius, paint);
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                    }
                } finally {
                    surfaceHolder.unlockCanvasAndPost(canvas);
                }
            }
        }
    }
}